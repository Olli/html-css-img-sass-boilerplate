            require 'autoprefixer-rails'
            #require File.join(File.dirname(__FILE__), 'config/base64-sass.rb')

            # Like usual, the Compass configuration path are relative to the :project_path
            # guard 'compass', project_path: 'not_current_dir', configuration_file: 'path/to/my/compass_config.rb'

            #guard :compass, project_path: 'scss', working_path: 'scss', configuration_file: 'scss/config.rb' do
            #  watch(%r{scss\/(.+)\.scss$})
            #end
            # you have to install sassc
            guard :shell do
              watch(%r{scss\/(.+)\.scss$}) do |file|
                `sassc -l scss/sass/style.scss cssstyle.css` #extended css at the end ... need to be compressed in production
                do_autoprefix("cssstyle.css","css/style.css")
              end
            end

            def do_autoprefix(infile,outfile)
              incss = File.read(infile)
              #cssfile = File.dirname(file) + File.basename(file)
              File.open(outfile, 'w') { |io| io << AutoprefixerRails.process(incss,
                                                                             browsers: ['> 1%', 'ie 10', 'last 2 version'],
                                                                             supports: false,
                                                                             grid: false) }


              system( "echo 'Autoprefixer has processed " + infile + "'" )

            end


            # guard :sass, input: 'scss/sass', output: 'css', smart_partials: true, shallow: true do
            #   callback(:run_on_changes_end) do |_, _, files|
            #     Array(files).each do |file|
            #       time = Benchmark.realtime { do_autoprefix(file) }
            #       benchmark = "[\e[33m%2.2fs\e[0m] " % time
            #       ::Guard::UI.info("\t\e[1;37mAutoprefixer\e[0m %s%s" % [benchmark, file])
            #     end
            #   end
            # end
            #
            # def do_autoprefix(file)
            #   css = File.read(file)
            #   cssfile = File.dirname(file) + File.basename(file)
            #   File.open(cssfile, 'w') { |io| io << AutoprefixerRails.process(css,
            #                                                                  browsers: ['> 1%', 'ie 10', 'last 2 version'],
            #                                                                  supports: false,
            #                                                                  grid: false) }
            #
            #
            #   system( "echo 'Autoprefixer has processed " + cssfile + "'" )
            #
            # end

            # Configuartion Options for guard-autoupload

            opts = {
                # Protocol used to connect to remote host.
                # Possible values are :scp, :sftp and :ftp.
                # Of these :scp is the preferred one for
                # its stability.
                protocol: :ftp,
                ssl: true,


                host: "ftp.example.net",

                # port: 22,            # Uncomment this if you need to set port to
                # something else than default.

                user: "",
                password: "",

                remote: "serverpath/files/template",

                verbose: true,        	# if true you get all outputs
                quiet: false,           # if true outputs only on exceptions.
                remote_delete: false    # delete the remote file if the local file is deleted (defaults to true)
            }

            guard :autoupload, opts do
              watch(/^(css|img|fonts|js)./)
              ignore [#%r{^scss}, # sonst geht der upload nicht
                      %r{^.sass-cache},
                      %r{^config},
                      %r{^.idea},
                      %r{cssstyle.css}, # tempfile
                      %r{^Guardfile}, #ignore the root guardfile
                      %r{^Gemfile}, #ignore the root guardfile
                      %r{__jb_old__}, %r{__jb_bak__}  # ruby idea ingores
                     ]
            end
            guard :webpack, colors: true, config: './config/webpack/development.config.js'
	    #guard :webpack, colors: false, config: './config/webpack/production.config.js'
